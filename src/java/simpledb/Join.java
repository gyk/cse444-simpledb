package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private final JoinPredicate predicate;
    private DbIterator child1;
    private DbIterator child2;
    private TupleDesc tupleDesc;
    private Tuple currTuple1;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     *
     * @param p      The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
        this.predicate = p;
        this.child1 = child1;
        this.child2 = child2;
        setTupleDesc();
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.predicate;
    }

    /**
     * @return the field name of join field1. Should be quantified by alias or table name.
     */
    public String getJoinField1Name() {
        // some code goes here
        int f1 = this.predicate.getField1();
        return this.child1.getTupleDesc().getFieldName(f1);
    }

    /**
     * @return the field name of join field2. Should be quantified by alias or table name.
     */
    public String getJoinField2Name() {
        // some code goes here
        int f2 = this.predicate.getField1();
        return this.child1.getTupleDesc().getFieldName(f2);
    }

    private void setTupleDesc() {
        this.tupleDesc = TupleDesc.merge(this.child1.getTupleDesc(), this.child2.getTupleDesc());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return this.tupleDesc;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        super.open();
        this.child1.open();
        this.child2.open();
    }

    public void close() {
        // some code goes here
        this.child1.close();
        this.child2.close();
        super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        this.child1.rewind();
        this.child2.rewind();
        this.currTuple1 = null;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        // Nested loops join
        // TODO: Optimization.

        Tuple currTuple2;
        while (true) {
            // loads tuple1
            if (this.currTuple1 == null) {
                if (this.child1 == null || this.child2 == null) {
                    throw new DbException("Child DbIterators are null");
                }
                if (!this.child1.hasNext()) {
                    return null;
                }
                this.currTuple1 = this.child1.next();
            }

            // advances tuple1
            if (!this.child2.hasNext()) {
                this.child2.rewind();
                this.currTuple1 = null;
                continue;
            }
            currTuple2 = this.child2.next();

            if (this.predicate.filter(this.currTuple1, currTuple2)) {
                break;
            }
        }

        Tuple res = new Tuple(this.tupleDesc);
        int nFields1 = this.child1.getTupleDesc().numFields();
        int nFields2 = this.child2.getTupleDesc().numFields();
        for (int i = 0; i < nFields1; i++) {
            res.setField(i, currTuple1.getField(i));
        }
        for (int i = 0; i < nFields2; i++) {
            res.setField(nFields1 + i, currTuple2.getField(i));
        }
        return res;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        return new DbIterator[]{this.child1, this.child2};
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
        this.child1 = children[0];
        this.child2 = children[1];
        setTupleDesc();
    }

}
